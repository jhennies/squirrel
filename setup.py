import runpy
from setuptools import setup, find_packages

version = runpy.run_path("squirrel/__version__.py")["__version__"]

setup(
    name='squirrel',
    version=version,
    author='Julian Hennies',
    author_email='hennies@embl.de',
    url='https://github.com/jhennies/squirrel',
    license="GPLv3",
    packages=find_packages(),
    entry_points={  # Naming scheme: sq-<namespace>-<func-name>, e.g. sq-stack-tif_nearest_scaling
        'console_scripts': [
            'apply_affine_on_volume = squirrel.transformation:affine_on_volume',
            'apply_rotation_and_scale = squirrel.transformation:apply_rotation_and_scale',
            'apply_z_chunks_to_volume = squirrel.transformation:apply_z_chunks_to_volume',
            'average_affine_on_volume = squirrel.transformation:average_affine_on_volume',
            'sequential_affine_on_volume = squirrel.transformation:sequential_affine_on_volume',
            'decompose_affine_matrix = squirrel.transformation:decompose_affine_matrix',
            'elastix_on_volume3d = squirrel.elastix_registration:elastix_on_volume3d',
            'elastix_slices_to_volume = squirrel.elastix_registration:elastix_slices_to_volume',
            'elastix_register_z_chunks = squirrel.elastix_registration:register_z_chunks',
            'sift2d_stack_alignment = squirrel.sift2d:sift2d_stack_alignment',
            'sift3d = squirrel.sift3d:main',
            'template_matching_stack_alignment = squirrel.template_matching:template_matching_stack_alignment',
            'fiji_sift_log_to_affine_stack = squirrel.fiji:sift_log_to_affine_stack',
            'sq-conversion-stack_to_ome_zarr = squirrel.conversions:stack_to_ome_zarr',
            'sq-conversion-ome_zarr_to_stack = squirrel.conversions:ome_zarr_to_stack',
            'sq-conversion-n5_to_stack = squirrel.conversions:n5_to_stack',
            'sq-conversion-cast_dtype = squirrel.conversions:cast_dtype',
            'sq-conversion-cast_segmentation = squirrel.conversions:cast_segmentation',
            'sq-conversion-h5_to_nii = squirrel.conversions:h5_to_nii',
            'sq-conversion-h5_to_tif = squirrel.conversions:h5_to_tif',
            'sq-conversion-mib_to_tif = squirrel.conversions:mib_to_tif',
            'sq-elastix-stack_alignment = squirrel.elastix_registration:elastix_stack_alignment',
            'sq-elastix-amst = squirrel.elastix_registration:amst',
            'sq-elastix-stack_alignment_validation = squirrel.elastix_registration:stack_alignment_validation',
            'sq-elastix-make_default_parameter_file = squirrel.elastix_registration:make_elastix_default_parameter_file',
            'sq-elastix-apply_multi_step_stack_alignment = squirrel.elastix_registration:apply_multi_step_stack_alignment',
            'sq-linalg-dot_product_on_affines = squirrel.linear_algebra:dot_product_on_affines',
            'sq-linalg-scale_sequential_affines = squirrel.linear_algebra:scale_sequential_affines',
            'sq-linalg-sequence_affine_stack = squirrel.linear_algebra:sequence_affine_stack',
            'sq-linalg-smooth_affine_sequence = squirrel.linear_algebra:smooth_affine_sequence',
            'sq-linalg-add_translational_drift = squirrel.linear_algebra:add_translational_drift',
            'sq-linalg-create_affine_sequence = squirrel.linear_algebra:create_affine_sequence',
            'sq-linalg-modify_step_in_sequence = squirrel.linear_algebra:modify_step_in_sequence',
            'sq-linalg-crop_transform_sequence = squirrel.linear_algebra:crop_transform_sequence',
            'sq-linalg-apply_z_step = squirrel.linear_algebra:apply_z_step',
            'sq-mobie-init_project = squirrel.mobie:init_mobie_project',
            'sq-mobie-export_rois_with_mobie_table = squirrel.mobie:export_rois_with_mobie_table',
            'sq-napari-view = squirrel.napari:view',
            'sq-serialem-parse_navigator_file = squirrel.serial_em:parse_navigator_file',
            'sq-serialem-create_link_maps = squirrel.serial_em:create_link_maps',
            'sq-stack-axis_median_filter = squirrel.stack_operations:axis_median_filter',
            'sq-stack-get_label_list = squirrel.stack_operations:get_label_list',
            'sq-stack-tif_nearest_scaling = squirrel.stack_operations:tif_nearest_scaling',
            'sq-stack-invert_slices = squirrel.stack_operations:invert_slices',
            'sq-stack-normalize_slices = squirrel.stack_operations:normalize_slices',
            'sq-stack-compress_tif_stack = squirrel.stack_operations:compress_tif_stack',
            'sq-stack-crop_from_stack = squirrel.stack_operations:crop_from_stack',
            'sq-stack-calculator = squirrel.stack_operations:stack_calculator',
            'sq-stack-clahe_on_stack = squirrel.stack_operations:clahe_on_stack',
            'sq-stack-estimate_crop_xy = squirrel.stack_operations:estimate_crop_xy',
            'sq-stack-filter_2d_workflow = squirrel.stack_operations:filter_2d',
            'sq-stack-merge_tif_stacks = squirrel.stack_operations:merge_tif_stacks',
            'sq-transform-apply_stack_alignment = squirrel.transformation:apply_stack_alignment',
            'sq-transform-apply_auto_pad = squirrel.transformation:apply_auto_pad'
        ]
    },
    install_requires=[
        'numpy>=2.0,<2.3',
        'h5py',
        'tifffile',
        'scipy',
        'scikit-image'
    ]
)
